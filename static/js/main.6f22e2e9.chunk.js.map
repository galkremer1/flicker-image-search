{"version":3,"sources":["style/style.js","components/searchInput.js","App.js","utils/utils.js","serviceWorker.js","index.js"],"names":["styles","root","padding","display","alignItems","width","margin","input","marginLeft","flex","iconButton","divider","height","searchContainer","backgroundColor","SearchInput","handleSearch","debounce","query","_this","props","handleInputChange","e","target","value","toLowerCase","_this$props","this","classes","inputPlaceHolder","react_default","a","createElement","className","Paper_default","elevation","InputBase_default","onChange","placeholder","Component","withStyles","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchInputPlaceHolder","searchTerm","fetch","then","response","text","data","JSON","parse","photos","photo","console","log","map","photoData","url","farm","server","id","secret","title","parseImageData","searchInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAAO,IAAMA,EAAS,CAClBC,KAAM,CACJC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,IACPC,OAAQ,QAEVC,MAAO,CACLC,WAAY,EACZC,KAAM,GAERC,WAAY,CACVR,QAAS,IAEXS,QAAS,CACPN,MAAO,EACPO,OAAQ,GACRN,OAAQ,GAEVO,gBAAiB,CACfX,QAAS,GACTY,gBAAiB,4DCdjBC,6MAEJC,aAAeC,IAAS,SAAAC,IAEtBF,EADyBG,EAAKC,MAAtBJ,cACKE,IACZ,OAEHG,kBAAoB,SAAAC,GAClB,IAAIf,EAAQe,EAAEC,OAAOC,MAAMC,cAC3BN,EAAKH,aAAaT,4EAGX,IAAAmB,EAC8BC,KAAKP,MAAlCQ,EADDF,EACCE,QAASC,EADVH,EACUG,iBACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQf,iBACtBiB,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOE,UAAWL,EAAQ3B,KAAMkC,UAAW,GACzCL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAWM,SAAUV,KAAKN,kBAAmBY,UAAWL,EAAQrB,MAAO+B,YAAaT,aAjBtEU,aAwBXC,uBAAWxC,EAAXwC,CAAmBzB,GCxB5B0B,sBAEJ,SAAAA,EAAYrB,GAAO,IAAAD,EAAA,OAAAuB,OAAAC,EAAA,EAAAD,CAAAf,KAAAc,IACjBtB,EAAAuB,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnB,KAAMP,KACD2B,MAAQ,CACXC,uBAAwB,qBAHT7B,mFCVd,IAAiB8B,KDkBZ,SCjBSC,MAAM,wLAAwLD,GAChNE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACpBF,KAAK,SAACG,GACH,OAAOC,KAAKC,MAAMF,MDcRH,KAAK,SAACG,GAClBA,GAAQA,EAAKG,QAAUH,EAAKG,OAAOC,OACvCC,QAAQC,ICXP,SAAwBN,GAG3B,OAAOA,EAAKO,IAAI,SAACC,GAEb,MAAO,CACHC,IAAK,eAFiCD,EAAnCE,KAEuB,qBAFYF,EAA7BG,OAE6C,IAFhBH,EAArBI,GAE4C,IAFvBJ,EAAjBK,OAEmD,OACxEC,MAHsCN,EAATM,SDOvBC,CAAef,EAAKG,OAAOC,+CAI9BT,GACXU,QAAQC,IAAIX,oCAGL,IACAD,EAA0BrB,KAAKoB,MAA/BC,uBACP,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,wBAGAH,EAAAC,EAAAC,cAACsC,EAAD,CAAatD,aAAcW,KAAKX,aAAca,iBAAkBmB,YA3BtDT,cAiCHC,uBAAWxC,EAAXwC,CAAmBC,GE7Bd8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.6f22e2e9.chunk.js","sourcesContent":["export const styles = {\n    root: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n      margin: 'auto'\n    },\n    input: {\n      marginLeft: 8,\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n    divider: {\n      width: 1,\n      height: 28,\n      margin: 4,\n    },\n    searchContainer: {\n      padding: 10,\n      backgroundColor: 'gray'\n    }\n  };","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport Paper from '@material-ui/core/Paper';\nimport debounce from 'lodash.debounce';\nimport { styles } from '../style/style';\n\n\nclass SearchInput extends Component {\n\n  handleSearch = debounce(query => {\n    const { handleSearch } = this.props;\n    handleSearch(query);\n  }, 200);\n\n  handleInputChange = e => {\n    let input = e.target.value.toLowerCase();\n    this.handleSearch(input);\n  };\n\n  render() {\n    const { classes, inputPlaceHolder} = this.props;\n    return (\n        <div className={classes.searchContainer}>\n          <Paper className={classes.root} elevation={1}>\n            <InputBase onChange={this.handleInputChange} className={classes.input} placeholder={inputPlaceHolder} />\n          </Paper>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SearchInput);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { getData, parseImageData } from \"./utils/utils\";\nimport { styles } from './style/style';\nimport SearchInput from './components/searchInput';\nimport './style/App.css';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputPlaceHolder: 'Search Flicker...'\n    }\n  }\n\n  componentDidMount() {\n    getData('animal').then((data)=>{\n      if (data && data.photos && data.photos.photo)\n      console.log(parseImageData(data.photos.photo));\n    })\n  }\n\n  handleSearch(searchTerm) {\n    console.log(searchTerm)\n  }\n\n  render() {\n    const {searchInputPlaceHolder} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        Flicker Image Search\n        </header>\n        <SearchInput handleSearch={this.handleSearch} inputPlaceHolder={searchInputPlaceHolder} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","export function getData(searchTerm) {\n\tconst promiseData = fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&safe_search=1&format=json&nojsoncallback=1&api_key=bac9f1ccfd854f27894fd47c4f01b1e8&content_type=1&is_getty=1&text='+searchTerm)\n\t\t.then(response => response.text())\n        .then((data) => {\n            return JSON.parse(data);\n        });\n    return promiseData;\n}\n\nexport function parseImageData(data) {\n// This function will build a url from the fetched data\n// Example: https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\n    return data.map((photoData)=>{\n        const {farm, server, id, secret, title} = photoData;\n        return {\n            url: 'https://farm'+farm +'.staticflickr.com/'+server+'/'+id+'_'+secret+'.jpg',\n            title\n        };\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}