{"version":3,"sources":["utils/utils.js","style/style.js","components/searchInput.js","components/gallery/gallery.js","components/gallery/galleryStyle.js","App.js","serviceWorker.js","index.js"],"names":["parseImageData","data","map","photoData","farm","server","id","secret","url","title","styles","root","padding","display","alignItems","width","margin","input","marginLeft","flex","iconButton","divider","height","searchContainer","backgroundColor","appContainer","textAlign","appHeader","minHeight","fontDize","color","position","zIndex","debounceTimer","SearchInput","handleSearch","debounce","query","_this","props","handleInputChange","e","target","value","toLowerCase","_this$props","this","classes","inputPlaceHolder","react_default","a","createElement","className","Paper_default","elevation","InputBase_default","onChange","placeholder","Component","withStyles","Gallery","photos","isLoading","galleryContainer","photo","key","alt","src","length","flexWrap","justifyContent","top","maxWidth","maxHeight","minWidth","flexFlow","transition","cursor","&:hover","transform","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleLoader","toggle","setState","loading","searchTerm","getData","state","searchInputPlaceHolder","_this2","fetch","then","response","text","JSON","parse","console","log","_this$state","searchInput","gallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNASO,SAASA,EAAeC,GAG3B,OAAOA,EAAKC,IAAI,SAACC,GAAY,IAClBC,EAAmCD,EAAnCC,KAAMC,EAA6BF,EAA7BE,OAAQC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,OACzB,MAAO,CACHC,IAAK,eAAeJ,EAAM,qBAAqBC,EAAO,IAAIC,EAAG,IAAIC,EAAO,OACxEE,MAHsCN,EAATM,MAI7BH,GAAI,GAAGC,EAAOD,KCjBnB,IAAMI,EAAS,CAClBC,KAAM,CACJC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,IACPC,OAAQ,QAEVC,MAAO,CACLC,WAAY,EACZC,KAAM,GAERC,WAAY,CACVR,QAAS,IAEXS,QAAS,CACPN,MAAO,EACPO,OAAQ,GACRN,OAAQ,GAEVO,gBAAiB,CACfX,QAAS,GACTY,gBAAiB,QAEnBC,aAAc,CACZC,UAAW,UAEbC,UAAW,CACTH,gBAAiB,UACjBI,UAAW,GACXC,SAAU,qBACVC,MAAO,QACPC,SAAU,QACVhB,MAAO,OACPiB,OAAQ,uDC5BRC,EAAc,IAEdC,6MAEJC,aAAeC,IAAS,SAAAC,IAEtBF,EADyBG,EAAKC,MAAtBJ,cACKE,IACZJ,KAEHO,kBAAoB,SAAAC,GAClB,IAAIxB,EAAQwB,EAAEC,OAAOC,MAAMC,cAC3BN,EAAKH,aAAalB,4EAGX,IAAA4B,EAC8BC,KAAKP,MAAlCQ,EADDF,EACCE,QAASC,EADVH,EACUG,iBACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQxB,iBACtB0B,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOE,UAAWL,EAAQpC,KAAM2C,UAAW,GACzCL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAWM,SAAUV,KAAKN,kBAAmBY,UAAWL,EAAQ9B,MAAOwC,YAAaT,aAjBtEU,aAwBXC,uBAAWjD,EAAXiD,CAAmBzB,GC3B5B0B,mLAGK,IAAAf,EAC+BC,KAAKP,MAAnCQ,EADDF,EACCE,QAASc,EADVhB,EACUgB,OAAQC,EADlBjB,EACkBiB,UACzB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQgB,kBACrBF,EAAO3D,IAAI,SAAC8D,GACX,OAAQf,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQiB,MAAOC,IAAKD,EAAM1D,GAAI4D,IAAKF,EAAMvD,MAAO0D,IAAKH,EAAMxD,SAEnFsD,GAA+B,IAAlBD,EAAOO,QAAgBnB,EAAAC,EAAAC,cAAA,iCAVxBO,aAkBPC,uBCvBO,CAClBI,iBAAkB,CACdlD,QAAS,OACTwD,SAAU,OACVC,eAAgB,SAChBvC,SAAU,WACVwC,IAAK,IAETP,MAAO,CACHQ,SAAU,MACVC,UAAW,IACXC,SAAU,IACVC,SAAU,aACV7D,WAAY,SACZE,OAAQ,EACR4D,WAAY,SACZC,OAAQ,UACRC,UAAU,CACNC,UAAW,gBDKRpB,CAAmBC,GEf5BoB,sBAEJ,SAAAA,EAAYzC,GAAO,IAAAD,EAAA,OAAA2C,OAAAC,EAAA,EAAAD,CAAAnC,KAAAkC,IACjB1C,EAAA2C,OAAAE,EAAA,EAAAF,CAAAnC,KAAAmC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvC,KAAMP,KAYR+C,aAAe,SAACC,GACdjD,EAAKkD,SAAS,CACZC,QAASF,KAfMjD,EA4BnBH,aAAe,SAACuD,GACdpD,EAAKqD,QAAQD,IA3BbpD,EAAKsD,MAAQ,CACXC,uBAAwB,oBACxBhC,OAAQ,GACR4B,SAAS,GALMnD,mFAUjBQ,KAAK6C,QAAQ,2CAQPD,GAAY,IAAAI,EAAAhD,KAClBA,KAAKwC,cAAa,GL7Bf,SAAiBI,GAMpB,OALiBK,MAAM,wLAAwLL,GAChNM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACpBF,KAAK,SAAC/F,GACH,OAAOkG,KAAKC,MAAMnG,KK0B1B0F,CAAQD,GAAYM,KAAK,SAAC/F,GACpBA,GAAQA,EAAK4D,QAAU5D,EAAK4D,OAAOG,QACrCqC,QAAQC,IAAIrG,EAAK4D,OAAOG,OACxB8B,EAAKN,SAAS,CAAC3B,OAAQ7D,EAAeC,EAAK4D,OAAOG,OAAQyB,SAAS,wCAShE,IAAA5C,EACuBC,KAAKP,MAA3BQ,EADDF,EACCE,QAASpB,EADVkB,EACUlB,UADV4E,EAE4CzD,KAAK8C,MAAhDC,EAFDU,EAECV,uBAAwBhC,EAFzB0C,EAEyB1C,OAAQ4B,EAFjCc,EAEiCd,QACxC,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQtB,cACtBwB,EAAAC,EAAAC,cAAA,UAAQC,UAAWL,EAAQpB,WACvBA,EACDsB,EAAAC,EAAAC,cAACqD,EAAD,CAAarE,aAAcW,KAAKX,aAAca,iBAAkB6C,KAGnE5C,EAAAC,EAAAC,cAACsD,EAAD,CAAS5C,OAAQA,EAAQC,UAAW2B,IAClCA,GACAxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,yBA9CQM,cAsDHC,uBAAWjD,EAAXiD,CAAmBqB,GClDd0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,CAAKtF,UAAW,yBAA2BuF,SAASC,eAAe,SD2H7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.73855daf.chunk.js","sourcesContent":["export function getData(searchTerm) {\n\tconst promiseData = fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&safe_search=1&format=json&nojsoncallback=1&api_key=bac9f1ccfd854f27894fd47c4f01b1e8&content_type=1&is_getty=1&text='+searchTerm)\n\t\t.then(response => response.text())\n        .then((data) => {\n            return JSON.parse(data);\n        });\n    return promiseData;\n}\n\nexport function parseImageData(data) {\n// This function will build a url from the fetched data\n// Example: https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\n    return data.map((photoData)=>{\n        const {farm, server, id, secret, title} = photoData;\n        return {\n            url: 'https://farm'+farm +'.staticflickr.com/'+server+'/'+id+'_'+secret+'.jpg',\n            title,\n            id: ''+secret+id\n        };\n    })\n}\n","export const styles = {\n    root: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n      margin: 'auto'\n    },\n    input: {\n      marginLeft: 8,\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n    divider: {\n      width: 1,\n      height: 28,\n      margin: 4,\n    },\n    searchContainer: {\n      padding: 10,\n      backgroundColor: 'gray'\n    },\n    appContainer: {\n      textAlign: 'center'\n    },\n    appHeader: {\n      backgroundColor: '#282c34',\n      minHeight: 45,\n      fontDize: 'calc(10px + 2vmin)',\n      color: 'white',\n      position: 'fixed',\n      width: '100%',\n      zIndex: 2\n    }\n  };","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport Paper from '@material-ui/core/Paper';\nimport debounce from 'lodash.debounce';\nimport { styles } from '../style/style';\nconst debounceTimer=200; //TODO: move to config\n\nclass SearchInput extends Component {\n\n  handleSearch = debounce(query => {\n    const { handleSearch } = this.props;\n    handleSearch(query);\n  }, debounceTimer);\n\n  handleInputChange = e => {\n    let input = e.target.value.toLowerCase();\n    this.handleSearch(input);\n  };\n\n  render() {\n    const { classes, inputPlaceHolder} = this.props;\n    return (\n        <div className={classes.searchContainer}>\n          <Paper className={classes.root} elevation={1}>\n            <InputBase onChange={this.handleInputChange} className={classes.input} placeholder={inputPlaceHolder} />\n          </Paper>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SearchInput);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { styles } from './galleryStyle';\n\n\nclass Gallery extends Component {\n\n\n  render() {\n    const { classes, photos, isLoading} = this.props;\n    return (\n      <div className={classes.galleryContainer}>\n        {photos.map((photo)=>{\n          return  <img className={classes.photo} key={photo.id} alt={photo.title} src={photo.url}/ >\n        })}\n        {!isLoading && photos.length === 0 && <div>\n          No results\n        </div>}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Gallery);\n","export const styles = {\n    galleryContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        position: 'relative',\n        top: 80\n    },\n    photo: {\n        maxWidth: '30%',\n        maxHeight: 150,\n        minWidth: 100,\n        flexFlow: 'row nowrap',\n        alignItems: 'center',\n        margin: 5,\n        transition: 'all 1s',\n        cursor: 'pointer',\n        '&:hover':{\n            transform: 'scale(1.2)'\n        }\n        \n    },\n  };","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { getData, parseImageData } from \"./utils/utils\";\nimport { styles } from './style/style';\nimport SearchInput from './components/searchInput';\nimport Gallery from './components/gallery/gallery';\nimport './style/loading.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputPlaceHolder: 'Search Flicker...',\n      photos: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    this.getData('animals');\n  }\n\n  toggleLoader = (toggle) => {\n    this.setState({\n      loading: toggle\n    })\n  }\n  getData(searchTerm) {\n    this.toggleLoader(true);\n    getData(searchTerm).then((data)=>{\n      if (data && data.photos && data.photos.photo) {\n        console.log(data.photos.photo);\n        this.setState({photos: parseImageData(data.photos.photo), loading: false});\n      }\n    })\n  }\n\n  handleSearch = (searchTerm) => {\n    this.getData(searchTerm);\n  }\n\n  render() {\n    const { classes, appHeader} = this.props;\n    const { searchInputPlaceHolder, photos, loading} = this.state;\n    return (\n      <div className={classes.appContainer}>\n        <header className={classes.appHeader}>\n           {appHeader}\n           <SearchInput handleSearch={this.handleSearch} inputPlaceHolder={searchInputPlaceHolder} />\n\n        </header>\n        <Gallery photos={photos} isLoading={loading} />\n        { loading &&  \n         (<div className=\"loading\">Loading&#8230;</div>)\n        }\n      </div>\n      \n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App appHeader={'Flicker Image Search'}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}